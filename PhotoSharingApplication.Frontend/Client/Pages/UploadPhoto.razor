@using PhotoSharingApplication.Shared.Interfaces
@using PhotoSharingApplication.Shared.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager
@page "/photos/upload"

<PageTitle>Upload Photo</PageTitle>

<MudForm Model="@photo" OnValidSubmit="HandleValidSubmit" Class="d-flex flex-column">
    <MudTextField Label="Title" Variant="Variant.Outlined" @bind-Value="photo.Title" Required="true" RequiredError="Title is required!" T="String" />
    <MudTextField Lines="5" Label="Description" Variant="Variant.Outlined" @bind-Value="photo.Description" T="String" />
    
    <div class="d-flex justify-center">
        <MudImage ObjectFit="ObjectFit.Cover" Src="@(photo.PhotoFile == null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" Class="rounded-lg ma-4" Width="200" Height="200" />
    </div>
    
    <div class="d-flex justify-center flex-column">
        <div class="m-5 d-flex justify-center">
            <InputFile id="fileInput" OnChange="HandleFileSelected" hidden multiple />
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload photo
            </MudButton>
        </div>
        
        <div class="m-4 mt-5 d-flex justify-center">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       type="submit">
                Submit
            </MudButton>
        </div>
        
    </div>
    
</MudForm>

@code {
    Photo photo = new Photo();

    private async Task HandleValidSubmit() {
        await photosService.UploadAsync(photo);
        navigationManager.NavigateTo("/photos/all");
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs args) {
        photo.ImageMimeType = args.File.ContentType;

        using (var streamReader = new System.IO.MemoryStream()) {
            await args.File.OpenReadStream().CopyToAsync(streamReader);
            photo.PhotoFile = streamReader.ToArray();
        }
    }
}