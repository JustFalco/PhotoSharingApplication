@using PhotoSharingApplication.Shared.Entities
@using PhotoSharingApplication.Shared.Interfaces
@inject IPhotosService photosService

@page "/photos/all"

<PageTitle>All Photos</PageTitle>

@if (photos is null)
{
    <p>...Loading...</p>
}
else
{
    @foreach (var photo in photos)
    {
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText Typo="Typo.h3">@photo.Title</MudText>
                <MudText Typo="Typo.subtitle1">@photo.Description</MudText>
                <p><MudImage Elevation="25" Class="rounded-lg" Src="@(photo.PhotoFile is null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" /></p>
            </MudCardContent>
            
            <MudCardActions>
                <NavLink href="@($"photos/details/{photo.Id}")">Details</NavLink>
                <NavLink class="m-2" href="@($"photos/update/{photo.Id}")">Update</NavLink>
                <NavLink href="@($"photos/delete/{photo.Id}")">Delete</NavLink>
            </MudCardActions>
        </MudCard>
    }

    <NavLink href="@($"photos/upload")" class="mt-5"><MudButton Variant="Variant.Filled" Color="Color.Primary">Upload new photo</MudButton></NavLink>

}


@code {
    List<Photo>? photos;

    protected override async Task OnInitializedAsync() {
        photos = await photosService.GetPhotosAsync();
    }
}
