@using PhotoSharingApplication.Shared.Interfaces
@using PhotoSharingApplication.Shared.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager

@page "/photos/delete/{id:int}"

<PageTitle>Delete Photo @photo?.Title</PageTitle>
@if (photo is null) {
    <p>...Loading...</p>
} else {

    <MudFab Color="Color.Primary" Class="mt-5 mb-5" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Small" OnClick="(()=> goToAllPhotos())" />

    <MudCard Outlined="true" Class="mt-3 mb-2">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">@photo.Id</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@photo.Title</MudText>
                <MudText Typo="Typo.body2">@photo.CreatedDate</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardMedia Image="@(photo.PhotoFile is null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" Height="250" />
        <MudCardContent>
            <MudText Typo="Typo.body2">@photo.Description</MudText>
        </MudCardContent>
    </MudCard>

    <MudButton @onclick="DeleteConfirm" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>

}

@code {
    [Parameter]
    public int Id { get; set; }

    Photo? photo;

    private void goToAllPhotos()
    {
        navigationManager.NavigateTo("/photos/all");
    }

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }
    private async Task DeleteConfirm(MouseEventArgs e) {
        await photosService.RemoveAsync(Id);
        navigationManager.NavigateTo("/photos/all");
    }
}